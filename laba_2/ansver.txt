	1)Зарезервированные слова в Javа

В языке программирования Java существуют зарезервированные ключевые слова, которые нельзя использовать в качестве имен переменных или объектов. 
///////////////////////////////////////////////////////////////////////////
	2)Зарезервированные имена методов Java

В языке программирования Java существуют зарезервированные ключевые слова, которые нельзя использовать в качестве имен переменных или объектов. 
///////////////////////////////////////////////////////////////////////////
	3)Идентификаторы

Имеют тип данных и мадификатор доступа(public, private, protected)
Инкапсуляция в Java позволяет скрыть детали реализации и обеспечивает безопасность, предоставляя только необходимый интерфейс для взаимодействия с объектами
///////////////////////////////////////////////////////////////////////////
	4)Литералы (целые, с плавающей точкой, логические, символьные,
	строчные) и константы

int = целочисленный||double = с плавующей точкой||boolean = логический||char = символьный||string = строковый||final = константа
///////////////////////////////////////////////////////////////////////////
	5)Управляющие символы

В Java управляющие символы представляют собой специальные последовательности, которые имеют особое значение для компилятора и используются для управления программой. 
(\n) (\t) (\b) (\r) (\\) (\") (\') (\uXXXX) 
///////////////////////////////////////////////////////////////////////////
	6)Операции и примитивные типы данных (целые типы, числа с
	плавающей точкой, символы и кодировки)

операторы +, -, *, /, % - арефметические 
= присваивание
==, !=, >, <, >=, <= логические

приметивные или фундоментальные стандартные которые есть в языке и являються основой для создания пользовательских типов
(int, short, long, byte)
(float, double)
(char)[]=(string)
(boolean)

кодировки
UTF-16
///////////////////////////////////////////////////////////////////////////
	7)Разделители

1.Разделение строки на подстроки (split())
2.символы-разделители (пробелы, табуляции, перевод строки и друг.)
///////////////////////////////////////////////////////////////////////////
	8)Переменные

имеет разные типы(вопрос 6.2)
им можно присваивать значения в зависимости от типа
константа final
///////////////////////////////////////////////////////////////////////////
	9)Операторы

+, -, *, /, % - арефметические 
= присваивание
==, !=, >, <, >=, <= логические
///////////////////////////////////////////////////////////////////////////
	10)Классы оболочки (ссылочные типы данных)

классы оболочки это классы над простыми типами например:
int => Integer
double => Double
с помощю них можно делать дополнтельные операции над обьектами типа
 
таким образом, классы оболочек предоставляют дополнительные функциональные возможности, но иногда примитивные типы более эффективны в использовании.

есть 2 типа: приметивные и ссылочные 
приметивные: int, byte, char...
ссылочные: классы, строки, классы обертки(Integer), массив
///////////////////////////////////////////////////////////////////////////
	11)Массивы (многомерные массивы)

пример
int[] Arr1 = new int[3];
int[][] Arr2 = new int[3][5];
///////////////////////////////////////////////////////////////////////////
	12)Тип String

пример 
String txt = "ABC";
txt.length() = 3;
.toUpperCase()
.toLowerCase()
...
///////////////////////////////////////////////////////////////////////////
	13)Консольный ввод-вывод

используются классы System.in и System.out

пример 
System.out.println("Hello"); с прирывом строки
System.out.print("Hello"); без прирыва строки

Scanner(System.in); запись страки
///////////////////////////////////////////////////////////////////////////
	14)Документирование кода

Javadoc - это мощный инструмент, который помогает создавать понятную и полезную документацию кода.

имеет основные теги:
1)@author: Указывает автора класса, интерфейса или перечисления.
2)@version: Показывает версию класса, интерфейса или перечисления.
3)@param: Описывает аргументы (параметры) метода или конструктора.
4)@return: Показывает типы возвращаемых значений для непустых методов.
5)@exception (или @throws): Показывает, какие исключения могут быть выброшены из метода или конструктора.
6)@see: Ссылки на методы, поля, классы или пакеты.
7)@since: Указывает, когда метод, поле или класс были добавлены.
8)@deprecated: Помечает класс, метод или поле как устаревшие.
///////////////////////////////////////////////////////////////////////////
	15)Code convention

стандарт написания кода